{
  "Sequelize Config File": {
    "prefix": "ras-sqlz-config",
    "body": [
      "{",
      "  development: {",
      "    username: ${1:username},",
      "    password: null,",
      "    database: ${2:DB_name}_development,",
      "    host: 127.0.0.1,",
      "    dialect: psql",
      "  },",
      "  test: {",
      "    username: root,",
      "    password: null,",
      "    database: d${2:DB_name}_test,",
      "    host: 127.0.0.1,",
      "    dialect: psql",
      "  },",
      "  production: {",
      "    username: root,",
      "    password: null,",
      "    database: ${2:DB_name}_production,",
      "    host: 127.0.0.1,",
      "    dialect: psql",
      "  }"
    ],
    "description": "Sequelize config file template"
  },
  "Sequelize Migration Template": {
    "prefix": "ras-sqlz-mig",
    "body": [
      "module.exports = {",
      "  up: async (queryInterface, Sequelize) => {",
      "    await queryInterface.createTable('${1:table_name_plural}', {",
      "      id: {",
      "        allowNull: false,",
      "        autoIncrement: true,",
      "        primaryKey: true,",
      "        type: Sequelize.INTEGER,",
      "      },",
      "      ${2:col_name_singular}: {",
      "        type: Sequelize.${3:DATATYPE},",
      "      },",
      "      // ... [<OTHER_COLUMNS>]",
      "      created_at: {",
      "        allowNull: false,",
      "        type: Sequelize.DATE,",
      "      },",
      "      updated_at: {",
      "        allowNull: false,",
      "        type: Sequelize.DATE,",
      "      },",
      "",
      "    });",
      "  },",
      "",
      "  down: async (queryInterface, Sequelize) => {",
      "    await queryInterface.dropTable('${1:table_name_plural}');",
      "  },",
      "};"
    ],
    "description": "Basic migration template"
  },
  "Sequelize table creation": {
    "prefix": "ras-sqlz-table",
    "body": [
      "await queryInterface.createTable('${1:table_name_plural}', {",
      "      id: {",
      "        allowNull: false,",
      "        autoIncrement: true,",
      "        primaryKey: true,",
      "        type: Sequelize.INTEGER,",
      "      },",
      "      ${2:name}: {",
      "        type: Sequelize.${3:DATATYPE},",
      "      },",
      "      created_at: {",
      "        allowNull: false,",
      "        type: Sequelize.DATE,",
      "      },",
      "      updated_at: {",
      "        allowNull: false,",
      "        type: Sequelize.DATE,",
      "      },",
      "    });"
    ],
    "description": ""
  },
  "Sequelize 1-many table creation": {
    "prefix": "ras-sqlz-table-otm",
    "body": [
      "await queryInterface.createTable('${1:table_name_plural}', {",
      "      id: {",
      "        allowNull: false,",
      "        autoIncrement: true,",
      "        primaryKey: true,",
      "        type: Sequelize.INTEGER,",
      "      },",
      "      name: {",
      "        type: Sequelize.STRING,",
      "      },",
      "      ${2:col_name_singular}_id: {",
      "        type: Sequelize.${3:DATATYPE},",
      "        // This links the ${2:col_name_singular}_id column to the id column in the ${2:col_Name_Singular}s table",
      "        references: {",
      "          model: '${2:col_name_singular}s',",
      "          key: 'id',",
      "        },",
      "      },",
      "      created_at: {",
      "        allowNull: false,",
      "        type: Sequelize.DATE,",
      "      },",
      "      updated_at: {",
      "        allowNull: false,",
      "        type: Sequelize.DATE,",
      "      },",
      "    });"
    ],
    "description": "One to many table template for sequelize migration file"
  },
  "Sequelize many-many table creation": {
    "prefix": "ras-sqlz-table-mtm",
    "body": [
      "await queryInterface.createTable('${1:table_name_plural}', {",
      "      id: {",
      "        allowNull: false,",
      "        autoIncrement: true,",
      "        primaryKey: true,",
      "        type: Sequelize.INTEGER,",
      "      },",
      "      ${2:col_name_singular}_id: {",
      "        type: Sequelize.INTEGER,",
      "        references: {",
      "          model: '${2:col_name_singular}s',",
      "          key: 'id',",
      "        },",
      "      },",
      "      ${3:col_name_singular}_id: {",
      "        type: Sequelize.INTEGER,",
      "        references: {",
      "          model: '${3:col_name_singular}s',",
      "          key: 'id',",
      "        },",
      "      },",
      "      created_at: {",
      "        allowNull: false,",
      "        type: Sequelize.DATE,",
      "      },",
      "      updated_at: {",
      "        allowNull: false,",
      "        type: Sequelize.DATE,",
      "      },",
      "    });",
      ""
    ],
    "description": "many to many table template for sequelize migration file"
  },
  "Sequelize model template": {
    "prefix": "ras-sqlz-mdl",
    "body": [
      "export default function init${TM_FILENAME_BASE}Model(sequelize, DataTypes) {",
      "  return sequelize.define('${TM_FILENAME_BASE}', {",
      "    id: {",
      "      allowNull: false,",
      "      autoIncrement: true,",
      "      primaryKey: true,",
      "      type: DataTypes.INTEGER,",
      "    },",
      "    ${1:col_name}: {",
      "      type: DataTypes.{$2:DATATYPE},",
      "    },",
      "    // ... [<OTHER_COLUMNS>]",
      "    createdAt: {",
      "      allowNull: false,",
      "      type: DataTypes.DATE,",
      "    },",
      "    updatedAt: {",
      "      allowNull: false,",
      "      type: DataTypes.DATE,",
      "    },",
      "  }, {",
      "    // The underscored option makes Sequelize reference snake_case names in the DB.",
      "    underscored: true",
      "  });",
      "};"
    ],
    "description": "basic sequelize model template"
  },
  "Sequelize otm model template": {
    "prefix": "ras-sqlz-mdl-otm",
    "body": [
      "export default function init${TM_FILENAME_BASE}Model(sequelize, DataTypes) {",
      "  return sequelize.define(",
      "    '${TM_FILENAME_BASE}',",
      "    {",
      "      id: {",
      "        allowNull: false,",
      "        autoIncrement: true,",
      "        primaryKey: true,",
      "        type: DataTypes.INTEGER,",
      "      },",
      "      ${1:col_name}: {",
      "        type: DataTypes.STRING,",
      "      },",
      "      ${TM_FILENAME_BASE}Id: {",
      "        type: DataTypes.INTEGER,",
      "        references: {",
      "          model: '${2:table_name}',",
      "          key: 'id',",
      "        },",
      "      },",
      "      createdAt: {",
      "        allowNull: false,",
      "        type: DataTypes.DATE,",
      "      },",
      "      updatedAt: {",
      "        allowNull: false,",
      "        type: DataTypes.DATE,",
      "      },",
      "    },",
      "    {",
      "      // The underscored option makes Sequelize reference snake_case names in the DB.",
      "      underscored: true,",
      "    }",
      "  );",
      "}"
    ],
    "description": "otm sequelize model template"
  },
  "Sequelize model index.mjs": {
    "prefix": "ras-sqlz-mdl-index",
    "body": [
      "import sequelizePackage from 'sequelize';",
      "import allConfig from '../config/config.js';",
      "",
      "// change to required models",
      "import initItemModel from './item.mjs';",
      "import initCategoryModel from './category.mjs';",
      "",
      "const { Sequelize } = sequelizePackage;",
      "const env = process.env.NODE_ENV || 'development';",
      "const config = allConfig[env];",
      "const db = {};",
      "",
      "let sequelize = new Sequelize(",
      "  config",
      ");",
      "",
      "// change to required models",
      "db.Item = initItemModel(sequelize, Sequelize.DataTypes);",
      "db.Category = initCategoryModel(sequelize, Sequelize.DataTypes);",
      "",
      "/*",
      "// FOR ONE-TO-MANY",
      "// The following 2 lines enable Sequelize to recognise the 1-M relationship",
      "// between Item and Category models, providing the mixin association methods.",
      "db.Item.belongsTo(db.Category);",
      "db.Category.hasMany(db.Item);",
      "*/",
      "",
      "/*",
      "FOR MANY TO MANY",
      "// in order for the many-to-many to work we must mention the join table here.",
      "db.Item.belongsToMany(db.Category, { through: 'category_items' });",
      "db.Category.belongsToMany(db.Item, { through: 'category_items' });",
      "*/",
      "",
      "db.sequelize = sequelize;",
      "db.Sequelize = Sequelize;",
      "",
      "export default db;"
    ],
    "description": "db setup template"
  },
  "MVC Routes": {
    "prefix": "ras-mvc-routes",
    "body": [
      "import db from './models/index.mjs';",
      "",
      "// import the controller",
      "import init${1:Items}Controller from './controllers/${2:item}.mjs';",
      "",
      "export default function bindRoutes(app) {",
      "  // pass in the db for all items callbacks",
      "  const ${2:item}sController = init${1:Items}Controller(db);",
      "",
      "  app.get('/${2:item}s', ${2:item}sController.index);",
      "}"
    ],
    "description": "Template for MVC route controller"
  },
  "CLI commands": {
    "prefix": "ras-npx-sqlz-cmds",
    "body": [
      "npm init -y",
      "npm install pg sequelize",
      "npm install --save-dev sequelize-cli",
      "mkdir config migrations models seeders",
      "npx sequelize db:create",
      "npx sequelize migration:generate --name create-table",
      "npx sequelize db:migrate",
      "npx sequelize db:migrate:undo",
      "npx sequelize seed:generate --name seed-data",
      "npx sequelize db:seed:all",
      "npx sequelize db:seed:all:undo",
      "npx sequelize db:seed:all --debug"
    ],
    "description": "Quick reference for npx commands"
  }
}
